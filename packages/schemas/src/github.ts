import { z } from "zod";

// Common GitHub user schema
const githubUserSchema = z.object({
  name: z.string().nullable(),
  email: z.string().nullable(),
  login: z.string().optional(),
  id: z.number().optional(),
  node_id: z.string().optional(),
  avatar_url: z.string().optional(),
  gravatar_id: z.string().nullable().optional(),
  url: z.string().optional(),
  html_url: z.string().optional(),
  type: z.string().optional(),
  site_admin: z.boolean().optional(),
});

// Common GitHub repository schema
const githubRepositorySchema = z.object({
  id: z.number(),
  node_id: z.string(),
  name: z.string(),
  full_name: z.string(),
  private: z.boolean(),
  owner: githubUserSchema,
  html_url: z.string(),
  description: z.string().nullable(),
  fork: z.boolean(),
  url: z.string(),
  created_at: z.union([z.number(), z.string()]),
  updated_at: z.string(),
  pushed_at: z.union([z.number(), z.string()]),
  git_url: z.string().optional(),
  ssh_url: z.string().optional(),
  clone_url: z.string().optional(),
  svn_url: z.string().optional(),
  homepage: z.string().nullable().optional(),
  size: z.number().optional(),
  stargazers_count: z.number().optional(),
  watchers_count: z.number().optional(),
  language: z.string().nullable().optional(),
  has_issues: z.boolean().optional(),
  has_projects: z.boolean().optional(),
  has_downloads: z.boolean().optional(),
  has_wiki: z.boolean().optional(),
  has_pages: z.boolean().optional(),
  forks_count: z.number().optional(),
  mirror_url: z.string().nullable().optional(),
  archived: z.boolean().optional(),
  disabled: z.boolean().optional(),
  open_issues_count: z.number().optional(),
  license: z
    .object({
      key: z.string(),
      name: z.string(),
      spdx_id: z.string().nullable(),
      url: z.string().nullable(),
      node_id: z.string(),
    })
    .nullable()
    .optional(),
  forks: z.number().optional(),
  open_issues: z.number().optional(),
  watchers: z.number().optional(),
  default_branch: z.string().optional(),
  stargazers: z.number().optional(),
  master_branch: z.string().optional(),
});

// GitHub Push Event Schema
export const githubPushSchema = z.object({
  ref: z.string(),
  before: z.string(),
  after: z.string(),
  repository: githubRepositorySchema,
  pusher: githubUserSchema,
  sender: githubUserSchema,
  created: z.boolean(),
  deleted: z.boolean(),
  forced: z.boolean(),
  base_ref: z.string().nullable(),
  compare: z.string(),
  commits: z.array(
    z.object({
      id: z.string(),
      tree_id: z.string(),
      distinct: z.boolean(),
      message: z.string(),
      timestamp: z.string(),
      url: z.string(),
      author: githubUserSchema,
      committer: githubUserSchema,
      added: z.array(z.string()),
      removed: z.array(z.string()),
      modified: z.array(z.string()),
    })
  ),
  head_commit: z
    .object({
      id: z.string(),
      tree_id: z.string(),
      distinct: z.boolean(),
      message: z.string(),
      timestamp: z.string(),
      url: z.string(),
      author: githubUserSchema,
      committer: githubUserSchema,
      added: z.array(z.string()),
      removed: z.array(z.string()),
      modified: z.array(z.string()),
    })
    .nullable(),
});

export type GitHubPushEvent = z.infer<typeof githubPushSchema>;

// GitHub Pull Request Event Schema
export const githubPullRequestSchema = z.object({
  action: z.enum([
    "opened",
    "edited",
    "closed",
    "reopened",
    "synchronize",
    "assigned",
    "unassigned",
    "labeled",
    "unlabeled",
    "review_requested",
    "review_request_removed",
    "ready_for_review",
    "converted_to_draft",
  ]),
  number: z.number(),
  pull_request: z.object({
    id: z.number(),
    node_id: z.string(),
    html_url: z.string(),
    diff_url: z.string(),
    patch_url: z.string(),
    issue_url: z.string(),
    number: z.number(),
    state: z.string(),
    locked: z.boolean(),
    title: z.string(),
    user: githubUserSchema,
    body: z.string().nullable(),
    created_at: z.string(),
    updated_at: z.string(),
    closed_at: z.string().nullable(),
    merged_at: z.string().nullable(),
    merge_commit_sha: z.string().nullable(),
    assignee: githubUserSchema.nullable(),
    assignees: z.array(githubUserSchema).optional(),
    requested_reviewers: z.array(githubUserSchema).optional(),
    requested_teams: z.array(z.any()).optional(),
    labels: z
      .array(
        z.object({
          id: z.number(),
          node_id: z.string(),
          url: z.string(),
          name: z.string(),
          color: z.string(),
          default: z.boolean(),
          description: z.string().nullable(),
        })
      )
      .optional(),
    milestone: z.any().nullable().optional(),
    draft: z.boolean().optional(),
    commits_url: z.string(),
    review_comments_url: z.string(),
    review_comment_url: z.string(),
    comments_url: z.string(),
    statuses_url: z.string(),
    head: z.object({
      label: z.string(),
      ref: z.string(),
      sha: z.string(),
      user: githubUserSchema,
      repo: githubRepositorySchema.nullable(),
    }),
    base: z.object({
      label: z.string(),
      ref: z.string(),
      sha: z.string(),
      user: githubUserSchema,
      repo: githubRepositorySchema,
    }),
    _links: z.object({
      self: z.object({ href: z.string() }),
      html: z.object({ href: z.string() }),
      issue: z.object({ href: z.string() }),
      comments: z.object({ href: z.string() }),
      review_comments: z.object({ href: z.string() }),
      review_comment: z.object({ href: z.string() }),
      commits: z.object({ href: z.string() }),
      statuses: z.object({ href: z.string() }),
    }),
    author_association: z.string(),
    auto_merge: z.any().nullable(),
    active_lock_reason: z.string().nullable().optional(),
    merged: z.boolean().optional(),
    mergeable: z.boolean().nullable().optional(),
    rebaseable: z.boolean().nullable().optional(),
    mergeable_state: z.string().optional(),
    merged_by: githubUserSchema.nullable().optional(),
    comments: z.number().optional(),
    review_comments: z.number().optional(),
    maintainer_can_modify: z.boolean().optional(),
    commits: z.number().optional(),
    additions: z.number().optional(),
    deletions: z.number().optional(),
    changed_files: z.number().optional(),
  }),
  repository: githubRepositorySchema,
  sender: githubUserSchema,
});

export type GitHubPullRequestEvent = z.infer<typeof githubPullRequestSchema>;

